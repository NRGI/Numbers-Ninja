tempCompanies <- tempCompanyData %>%
select(companyRange) %>%
filter(`C. Companies` == "Legal name") %>%
select(-`C. Companies`) %>%
unlist(use.names = F)
##Get list of company ids
tempCompanyIDs<- tempCompanyData %>%
select(companyRange) %>%
filter(`C. Companies` == "Identification #") %>%
select(-`C. Companies`) %>%
unlist(use.names = F)
##Construct the company table for this file
tempCompanyTable <- tibble(companyID = tempCompanyIDs, companyName = tempCompanies) %>%
group_by(companyName) %>%
mutate(numObs = n(), rowNum = row_number()) %>%
ungroup() %>%
mutate(companyName = if_else(numObs > 1, paste(companyName, rowNum, sep = "_"), companyName)) %>%
select(1:2)
##Add to company table
companyTable <- bind_rows(companyTable, tempCompanyTable)
##Extract the payment data
#Find the number of rows to skip
skipRows <- match("GFS codes", tempCompanyData$`Government revenues from extractive companies, per revenue stream`) + 1
print(skipRows)
##Load the excel file but skip rows so that we have payment data
tempPaymentData <- read_excel(path = pathToFile, sheet = "3. Revenues", skip = skipRows)  %>%
select(1, 4, 5, 8:ncol(tempCompanyData))
#
# ##rename the first 3 columns
# names(tempPaymentData)[1:3] <- c("gfsCode", "revStreamName", "agencyName")
#
# ##rename the payment columns with company names
# names(tempPaymentData)[4:ncol(tempPaymentData)] <- tempCompanyTable$companyName
#
# ##gather the columns to convert to long format table
# tempPaymentData <- tempPaymentData %>%
#     gather(key = "companyName", value = "payment", -(1:3)) %>%
#     mutate(payment = as.numeric(payment)) %>%
#     filter(!is.na(payment) | payment != 0)
#
#
# ##add payment data to payment table
# paymentTable <- bind_rows(paymentTable, tempPaymentData)
}
}
list(companyTable = companyTable, paymentTable = paymentTable) #
}
mongoliaData <- getEitiData(pathToFolder = "Data/Mongolia")
tempRead <- read_excel("Data/Mongolia/2006 Mongolia Summary Data_san.xlsx", sheet = "3. Revenues")
mongoliaData <- getEitiData(pathToFolder = "Data/Mongolia")
tempRead <- read_excel("Data/Mongolia/2006 Mongolia Summary Data_san.xlsx", sheet = "3. Revenues")
which(str_detect(str_to_lower(tempRead$`Government revenues from extractive companies, per revenue stream`), "gfs"))
which(str_detect(str_to_lower(tempRead$`Government revenues from extractive companies, per revenue stream`), "gfs code"))
View(tempRead)
which(str_detect(str_to_lower(tempRead$`Government revenues from extractive companies, per revenue stream`), "gfs code of revenue streams"))
which(str_detect(str_to_lower(tempRead$`Government revenues from extractive companies, per revenue stream`), "gfs codes of revenue streams"))
tempRead <- read_excel("Data/Mongolia/2007 Mongolia Summary Data_san.xlsx", sheet = "3. Revenues")
which(str_detect(str_to_lower(tempRead$`Government revenues from extractive companies, per revenue stream`), "gfs codes of revenue streams"))
tempRead <- read_excel("Data/Mongolia/2008 Mongolia Summary Data_san.xlsx", sheet = "3. Revenues")
which(str_detect(str_to_lower(tempRead$`Government revenues from extractive companies, per revenue stream`), "gfs codes of revenue streams"))
tempRead <- read_excel("Data/Mongolia/2009 Mongolia Summary Data_san.xlsx", sheet = "3. Revenues")
which(str_detect(str_to_lower(tempRead$`Government revenues from extractive companies, per revenue stream`), "gfs codes of revenue streams"))
tempRead <- read_excel("Data/Mongolia/2010 Mongolia Summary Data_san.xlsx", sheet = "3. Revenues")
which(str_detect(str_to_lower(tempRead$`Government revenues from extractive companies, per revenue stream`), "gfs codes of revenue streams"))
tempRead <- read_excel("Data/Mongolia/2012 Mongolia Summary Data_san.xlsx", sheet = "3. Revenues")
which(str_detect(str_to_lower(tempRead$`Government revenues from extractive companies, per revenue stream`), "gfs codes of revenue streams"))
tempRead <- read_excel("Data/Mongolia/2013 Mongolia Summary Data_san.xlsx", sheet = "3. Revenues")
which(str_detect(str_to_lower(tempRead$`Government revenues from extractive companies, per revenue stream`), "gfs codes of revenue streams"))
which(str_detect(str_to_lower(tempRead$`Government revenues from extractive companies, per revenue stream`), "gfs codes"))
max(which(str_detect(str_to_lower(tempRead$`Government revenues from extractive companies, per revenue stream`), "gfs codes")))
tempRead <- read_excel("Data/Mongolia/2012 Mongolia Summary Data_san.xlsx", sheet = "3. Revenues")
max(which(str_detect(str_to_lower(tempRead$`Government revenues from extractive companies, per revenue stream`), "gfs codes")))
getEitiData <- function(pathToFolder) {
library(readxl); library(tidyverse)
##get the list of files from the Nigeria folder
listOfFiles <- list.files(pathToFolder, pattern = "xlsx")
##Setup a tibble to store company ids and names
companyTable <- tibble(companyID = character(), companyName = character())
##Setup a tibble to store payment data
paymentTable <- tibble(gfsCode = character(), revStreamName = character(), agencyName = character(), companyName = character(), payment = numeric())
##Setup up a loop to load each excel file
for(i in 1:length(listOfFiles)) {
##Setup up the path to each file
pathToFile <- paste(pathToFolder, "/", listOfFiles[i], sep = "")
print(paste(excel_sheets(pathToFile), listOfFiles[i], sep = " - "))
##Check if the Revenue sheet exists
extractData <- sum(str_detect(excel_sheets(path = pathToFile), "3. Revenues")) == 1
if(extractData) {
##Extract company id and names
tempCompanyData <- read_excel(path = pathToFile, sheet = 4)
##Extract the company range in the sheet
companyRange <- match("C. Companies", names(tempCompanyData)):ncol(tempCompanyData)
##Get the list of companies
tempCompanies <- tempCompanyData %>%
select(companyRange) %>%
filter(`C. Companies` == "Legal name") %>%
select(-`C. Companies`) %>%
unlist(use.names = F)
##Get list of company ids
tempCompanyIDs<- tempCompanyData %>%
select(companyRange) %>%
filter(`C. Companies` == "Identification #") %>%
select(-`C. Companies`) %>%
unlist(use.names = F)
##Construct the company table for this file
tempCompanyTable <- tibble(companyID = tempCompanyIDs, companyName = tempCompanies) %>%
group_by(companyName) %>%
mutate(numObs = n(), rowNum = row_number()) %>%
ungroup() %>%
mutate(companyName = if_else(numObs > 1, paste(companyName, rowNum, sep = "_"), companyName)) %>%
select(1:2)
##Add to company table
companyTable <- bind_rows(companyTable, tempCompanyTable)
##Extract the payment data
#Find the number of rows to skip
skipRows <- max(which(str_detect(str_to_lower(tempCompanyData$`Government revenues from extractive companies, per revenue stream`), "gfs codes"))) + 1
##Load the excel file but skip rows so that we have payment data
tempPaymentData <- read_excel(path = pathToFile, sheet = "3. Revenues", skip = skipRows)  %>%
select(1, 4, 5, 8:ncol(tempCompanyData))
# ##rename the first 3 columns
# names(tempPaymentData)[1:3] <- c("gfsCode", "revStreamName", "agencyName")
#
# ##rename the payment columns with company names
# names(tempPaymentData)[4:ncol(tempPaymentData)] <- tempCompanyTable$companyName
#
# ##gather the columns to convert to long format table
# tempPaymentData <- tempPaymentData %>%
#     gather(key = "companyName", value = "payment", -(1:3)) %>%
#     mutate(payment = as.numeric(payment)) %>%
#     filter(!is.na(payment) | payment != 0)
#
#
# ##add payment data to payment table
# paymentTable <- bind_rows(paymentTable, tempPaymentData)
}
}
list(companyTable = companyTable, paymentTable = paymentTable) #
}
mongoliaData <- getEitiData(pathToFolder = "Data/Mongolia")
mongoliaData <- getEitiData(pathToFolder = "Data/Mongolia")
getEitiData <- function(pathToFolder) {
library(readxl); library(tidyverse)
##get the list of files from the Nigeria folder
listOfFiles <- list.files(pathToFolder, pattern = "xlsx")
##Setup a tibble to store company ids and names
companyTable <- tibble(companyID = character(), companyName = character())
##Setup a tibble to store payment data
paymentTable <- tibble(gfsCode = character(), revStreamName = character(), agencyName = character(), companyName = character(), payment = numeric())
##Setup up a loop to load each excel file
for(i in 1:length(listOfFiles)) {
##Setup up the path to each file
pathToFile <- paste(pathToFolder, "/", listOfFiles[i], sep = "")
print(paste(excel_sheets(pathToFile), listOfFiles[i], sep = " - "))
##Check if the Revenue sheet exists
extractData <- sum(str_detect(excel_sheets(path = pathToFile), "3. Revenues")) == 1
if(extractData) {
##Extract company id and names
tempCompanyData <- read_excel(path = pathToFile, sheet = 4)
##Extract the company range in the sheet
companyRange <- match("C. Companies", names(tempCompanyData)):ncol(tempCompanyData)
##Get the list of companies
tempCompanies <- tempCompanyData %>%
select(companyRange) %>%
filter(`C. Companies` == "Legal name") %>%
select(-`C. Companies`) %>%
unlist(use.names = F)
##Get list of company ids
tempCompanyIDs<- tempCompanyData %>%
select(companyRange) %>%
filter(`C. Companies` == "Identification #") %>%
select(-`C. Companies`) %>%
unlist(use.names = F)
##Construct the company table for this file
tempCompanyTable <- tibble(companyID = tempCompanyIDs, companyName = tempCompanies) %>%
group_by(companyName) %>%
mutate(numObs = n(), rowNum = row_number()) %>%
ungroup() %>%
mutate(companyName = if_else(numObs > 1, paste(companyName, rowNum, sep = "_"), companyName)) %>%
select(1:2)
##Add to company table
companyTable <- bind_rows(companyTable, tempCompanyTable)
##Extract the payment data
#Find the number of rows to skip
skipRows <- max(which(str_detect(str_to_lower(tempCompanyData$`Government revenues from extractive companies, per revenue stream`), "gfs codes"))) + 1
##Load the excel file but skip rows so that we have payment data
tempPaymentData <- read_excel(path = pathToFile, sheet = "3. Revenues", skip = skipRows)  %>%
select(1, 4, 5, 8:ncol(tempCompanyData))
##rename the first 3 columns
names(tempPaymentData)[1:3] <- c("gfsCode", "revStreamName", "agencyName")
##rename the payment columns with company names
names(tempPaymentData)[4:ncol(tempPaymentData)] <- tempCompanyTable$companyName
##gather the columns to convert to long format table
tempPaymentData <- tempPaymentData %>%
gather(key = "companyName", value = "payment", -(1:3)) %>%
mutate(payment = as.numeric(payment)) %>%
filter(!is.na(payment) | payment != 0)
##add payment data to payment table
paymentTable <- bind_rows(paymentTable, tempPaymentData)
}
}
list(companyTable = companyTable, paymentTable = paymentTable) #
}
mongoliaData <- getEitiData(pathToFolder = "Data/Mongolia")
getEitiData <- function(pathToFolder) {
library(readxl); library(tidyverse)
##get the list of files from the Nigeria folder
listOfFiles <- list.files(pathToFolder, pattern = "xlsx")
##Setup a tibble to store company ids and names
companyTable <- tibble(companyID = character(), companyName = character())
##Setup a tibble to store payment data
paymentTable <- tibble(gfsCode = character(), revStreamName = character(), agencyName = character(), companyName = character(), payment = numeric())
##Setup up a loop to load each excel file
for(i in 1:length(listOfFiles)) {
##Setup up the path to each file
pathToFile <- paste(pathToFolder, "/", listOfFiles[i], sep = "")
# print(paste(excel_sheets(pathToFile), listOfFiles[i], sep = " - "))
##Check if the Revenue sheet exists
extractData <- sum(str_detect(excel_sheets(path = pathToFile), "3. Revenues")) == 1
if(extractData) {
##Extract company id and names
tempCompanyData <- read_excel(path = pathToFile, sheet = 4)
##Extract the company range in the sheet
companyRange <- match("C. Companies", names(tempCompanyData)):ncol(tempCompanyData)
##Get the list of companies
tempCompanies <- tempCompanyData %>%
select(companyRange) %>%
filter(`C. Companies` == "Legal name") %>%
select(-`C. Companies`) %>%
unlist(use.names = F)
##Get list of company ids
tempCompanyIDs<- tempCompanyData %>%
select(companyRange) %>%
filter(`C. Companies` == "Identification #") %>%
select(-`C. Companies`) %>%
unlist(use.names = F)
##Construct the company table for this file
tempCompanyTable <- tibble(companyID = tempCompanyIDs, companyName = tempCompanies) %>%
group_by(companyName) %>%
mutate(numObs = n(), rowNum = row_number()) %>%
ungroup() %>%
mutate(companyName = if_else(numObs > 1, paste(companyName, rowNum, sep = "_"), companyName)) %>%
select(1:2)
##Add to company table
companyTable <- bind_rows(companyTable, tempCompanyTable)
##Extract the payment data
#Find the number of rows to skip
skipRows <- max(which(str_detect(str_to_lower(tempCompanyData$`Government revenues from extractive companies, per revenue stream`), "gfs codes"))) + 1
##Load the excel file but skip rows so that we have payment data
tempPaymentData <- read_excel(path = pathToFile, sheet = "3. Revenues", skip = skipRows)  %>%
select(1, 4, 5, 8:ncol(tempCompanyData))
##rename the first 3 columns
names(tempPaymentData)[1:3] <- c("gfsCode", "revStreamName", "agencyName")
##rename the payment columns with company names
names(tempPaymentData)[4:ncol(tempPaymentData)] <- tempCompanyTable$companyName
##gather the columns to convert to long format table
tempPaymentData <- tempPaymentData %>%
gather(key = "companyName", value = "payment", -(1:3)) %>%
mutate(payment = as.numeric(payment)) %>%
filter(!is.na(payment) | payment != 0)
##add payment data to payment table
paymentTable <- bind_rows(paymentTable, tempPaymentData)
}
}
list(companyTable = companyTable, paymentTable = paymentTable) #
}
mongoliaPaymentTable <- mongoliaData$paymentTable
mongoliaCompanyTable <- mongoliaData$companyTable
rm(list = ls())
library(readxl); library(tidyverse)
getEitiData <- function(pathToFolder) {
library(readxl); library(tidyverse)
##get the list of files from the Nigeria folder
listOfFiles <- list.files(pathToFolder, pattern = "xlsx")
##Setup a tibble to store company ids and names
companyTable <- tibble(companyID = character(), companyName = character())
##Setup a tibble to store payment data
paymentTable <- tibble(gfsCode = character(), revStreamName = character(), agencyName = character(), companyName = character(), payment = numeric())
##Setup up a loop to load each excel file
for(i in 1:length(listOfFiles)) {
##Setup up the path to each file
pathToFile <- paste(pathToFolder, "/", listOfFiles[i], sep = "")
# print(paste(excel_sheets(pathToFile), listOfFiles[i], sep = " - "))
##Check if the Revenue sheet exists
extractData <- sum(str_detect(excel_sheets(path = pathToFile), "3. Revenues")) == 1
if(extractData) {
##Extract company id and names
tempCompanyData <- read_excel(path = pathToFile, sheet = 4)
##Extract the company range in the sheet
companyRange <- match("C. Companies", names(tempCompanyData)):ncol(tempCompanyData)
##Get the list of companies
tempCompanies <- tempCompanyData %>%
select(companyRange) %>%
filter(`C. Companies` == "Legal name") %>%
select(-`C. Companies`) %>%
unlist(use.names = F)
##Get list of company ids
tempCompanyIDs<- tempCompanyData %>%
select(companyRange) %>%
filter(`C. Companies` == "Identification #") %>%
select(-`C. Companies`) %>%
unlist(use.names = F)
##Construct the company table for this file
tempCompanyTable <- tibble(companyID = tempCompanyIDs, companyName = tempCompanies) %>%
group_by(companyName) %>%
mutate(numObs = n(), rowNum = row_number()) %>%
ungroup() %>%
mutate(companyName = if_else(numObs > 1, paste(companyName, rowNum, sep = "_"), companyName)) %>%
select(1:2)
##Add to company table
companyTable <- bind_rows(companyTable, tempCompanyTable)
##Extract the payment data
#Find the number of rows to skip
skipRows <- max(which(str_detect(str_to_lower(tempCompanyData$`Government revenues from extractive companies, per revenue stream`), "gfs codes"))) + 1
##Load the excel file but skip rows so that we have payment data
tempPaymentData <- read_excel(path = pathToFile, sheet = "3. Revenues", skip = skipRows)  %>%
select(1, 4, 5, 8:ncol(tempCompanyData))
##rename the first 3 columns
names(tempPaymentData)[1:3] <- c("gfsCode", "revStreamName", "agencyName")
##rename the payment columns with company names
names(tempPaymentData)[4:ncol(tempPaymentData)] <- tempCompanyTable$companyName
##gather the columns to convert to long format table
tempPaymentData <- tempPaymentData %>%
gather(key = "companyName", value = "payment", -(1:3)) %>%
mutate(payment = as.numeric(payment)) %>%
filter(!is.na(payment) | payment != 0)
##add payment data to payment table
paymentTable <- bind_rows(paymentTable, tempPaymentData)
}
}
list(companyTable = companyTable, paymentTable = paymentTable) #
}
nigeriaData <- getEitiData(pathToFolder = "Data/Nigeria")
nigeriaPaymentData <- nigeriaData$paymentTable
nigeriaCompanyData <- nigeriaData$companyTable
mongoliaData <- getEitiData(pathToFolder = "Data/Mongolia")
mongoliaPaymentTable <- mongoliaData$paymentTable
mongoliaCompanyTable <- mongoliaData$companyTable
View(mongoliaData)
View(mongoliaPaymentTable)
View(nigeriaCompanyData)
View(nigeriaPaymentData)
View(nigeriaPaymentData)
View(mongoliaCompanyTable)
afgData <- getEitiData(pathToFolder = "Data/Afghanistan")
rm(list = ls())
library(readxl); library(tidyverse)
getEitiData <- function(pathToFolder) {
library(readxl); library(tidyverse)
##get the list of files from the Nigeria folder
listOfFiles <- list.files(pathToFolder, pattern = "xlsx")
##Setup a tibble to store company ids and names
companyTable <- tibble(companyID = character(), companyName = character())
##Setup a tibble to store payment data
paymentTable <- tibble(gfsCode = character(), revStreamName = character(), agencyName = character(), companyName = character(), payment = numeric())
##Setup up a loop to load each excel file
for(i in 1:length(listOfFiles)) {
##Setup up the path to each file
pathToFile <- paste(pathToFolder, "/", listOfFiles[i], sep = "")
# print(paste(excel_sheets(pathToFile), listOfFiles[i], sep = " - "))
##Check if the Revenue sheet exists
extractData <- sum(str_detect(excel_sheets(path = pathToFile), "3. Revenues")) == 1
if(extractData) {
##Extract company id and names
tempCompanyData <- read_excel(path = pathToFile, sheet = 4)
##Extract the company range in the sheet
companyRange <- match("C. Companies", names(tempCompanyData)):ncol(tempCompanyData)
##Get the list of companies
tempCompanies <- tempCompanyData %>%
select(companyRange) %>%
filter(`C. Companies` == "Legal name") %>%
select(-`C. Companies`) %>%
unlist(use.names = F)
##Get list of company ids
tempCompanyIDs<- tempCompanyData %>%
select(companyRange) %>%
filter(`C. Companies` == "Identification #") %>%
select(-`C. Companies`) %>%
unlist(use.names = F)
##Construct the company table for this file
tempCompanyTable <- tibble(companyID = tempCompanyIDs, companyName = tempCompanies) %>%
group_by(companyName) %>%
mutate(numObs = n(), rowNum = row_number()) %>%
ungroup() %>%
mutate(companyName = if_else(numObs > 1, paste(companyName, rowNum, sep = "_"), companyName)) %>%
select(1:2)
##Add to company table
companyTable <- bind_rows(companyTable, tempCompanyTable)
##Extract the payment data
#Find the number of rows to skip
skipRows <- max(which(str_detect(str_to_lower(tempCompanyData$`Government revenues from extractive companies, per revenue stream`), "gfs codes"))) + 1
##Load the excel file but skip rows so that we have payment data
tempPaymentData <- read_excel(path = pathToFile, sheet = "3. Revenues", skip = skipRows)  %>%
select(1, 4, 5, 8:ncol(tempCompanyData))
##rename the first 3 columns
names(tempPaymentData)[1:3] <- c("gfsCode", "revStreamName", "agencyName")
##rename the payment columns with company names
names(tempPaymentData)[4:ncol(tempPaymentData)] <- tempCompanyTable$companyName
##gather the columns to convert to long format table
tempPaymentData <- tempPaymentData %>%
gather(key = "companyName", value = "payment", -(1:3)) %>%
mutate(payment = as.numeric(payment)) %>%
filter(!is.na(payment) | payment != 0)
##add payment data to payment table
paymentTable <- bind_rows(paymentTable, tempPaymentData)
}
}
list(companyTable = companyTable, paymentTable = paymentTable) #
}
nigeriaData <- getEitiData(pathToFolder = "Data/Nigeria")
View(nigeriaData)
nigeriaPaymentData <- nigeriaData$paymentTable
nigeriaCompanyData <- nigeriaData$companyTable
View(nigeriaCompanyData)
View(nigeriaPaymentData)
mongoliaData <- getEitiData(pathToFolder = "Data/Mongolia")
mongoliaPaymentTable <- mongoliaData$paymentTable
mongoliaCompanyTable <- mongoliaData$companyTable
View(mongoliaPaymentTable)
View(mongoliaCompanyTable)
substr("Anne Chineweze", 3, 2)
substr("Anne Chineweze", 1, 4)
rm(list = ls())
library(readxl); library(tidyverse)
getEitiData <- function(pathToFolder) {
library(readxl); library(tidyverse)
##get the list of files from the Nigeria folder
listOfFiles <- list.files(pathToFolder, pattern = "xlsx")
##Setup a tibble to store company ids and names
companyTable <- tibble(companyID = character(), companyName = character())
##Setup a tibble to store payment data
paymentTable <- tibble(gfsCode = character(), revStreamName = character(), agencyName = character(), companyName = character(), payment = numeric(), year = integer())
##Setup up a loop to load each excel file
for(i in 1:length(listOfFiles)) {
##Setup up the path to each file
pathToFile <- paste(pathToFolder, "/", listOfFiles[i], sep = "")
# print(paste(excel_sheets(pathToFile), listOfFiles[i], sep = " - "))
##Check if the Revenue sheet exists
extractData <- sum(str_detect(excel_sheets(path = pathToFile), "3. Revenues")) == 1
if(extractData) {
##get the year of the data
currYear <- as.integer(substr(listOfFiles[i], 1, 4))
##Extract company id and names
tempCompanyData <- read_excel(path = pathToFile, sheet = 4)
##Extract the company range in the sheet
companyRange <- match("C. Companies", names(tempCompanyData)):ncol(tempCompanyData)
##Get the list of companies
tempCompanies <- tempCompanyData %>%
select(companyRange) %>%
filter(`C. Companies` == "Legal name") %>%
select(-`C. Companies`) %>%
unlist(use.names = F)
##Get list of company ids
tempCompanyIDs<- tempCompanyData %>%
select(companyRange) %>%
filter(`C. Companies` == "Identification #") %>%
select(-`C. Companies`) %>%
unlist(use.names = F)
##Construct the company table for this file
tempCompanyTable <- tibble(companyID = tempCompanyIDs, companyName = tempCompanies) %>%
group_by(companyName) %>%
mutate(numObs = n(), rowNum = row_number()) %>%
ungroup() %>%
mutate(companyName = if_else(numObs > 1, paste(companyName, rowNum, sep = "_"), companyName)) %>%
select(1:2)
##Add to company table
companyTable <- bind_rows(companyTable, tempCompanyTable)
##Extract the payment data
#Find the number of rows to skip
skipRows <- max(which(str_detect(str_to_lower(tempCompanyData$`Government revenues from extractive companies, per revenue stream`), "gfs codes"))) + 1
##Load the excel file but skip rows so that we have payment data
tempPaymentData <- read_excel(path = pathToFile, sheet = "3. Revenues", skip = skipRows)  %>%
select(1, 4, 5, 8:ncol(tempCompanyData))
##rename the first 3 columns
names(tempPaymentData)[1:3] <- c("gfsCode", "revStreamName", "agencyName")
##rename the payment columns with company names
names(tempPaymentData)[4:ncol(tempPaymentData)] <- tempCompanyTable$companyName
##gather the columns to convert to long format table
tempPaymentData <- tempPaymentData %>%
gather(key = "companyName", value = "payment", -(1:3)) %>%
mutate(payment = as.numeric(payment)) %>%
filter(!is.na(payment) | payment != 0) %>%
mutate(year = currYear)
##add payment data to payment table
paymentTable <- bind_rows(paymentTable, tempPaymentData)
}
}
list(companyTable = companyTable, paymentTable = paymentTable) #
}
nigeriaData <- getEitiData(pathToFolder = "Data/Nigeria")
nigeriaPaymentData <- nigeriaData$paymentTable
nigeriaCompanyData <- nigeriaData$companyTable
View(nigeriaPaymentData)
mongoliaData <- getEitiData(pathToFolder = "Data/Mongolia")
mongoliaPaymentTable <- mongoliaData$paymentTable
mongoliaCompanyTable <- mongoliaData$companyTable
rm(list = ls())
library(readxl); library(tidyverse)
source("Function to get eiti data.R")
rm(list = ls())
library(tidyverse); library(sf)
eitiImport <- read_csv("http://eiti.transparenciapresupuestaria.gob.mx/es/eiti/ficha_recurso/_rid/13/_mto/3/_mod/descargar?tipo=recurso_csv&id=4", locale = locale(encoding = "latin1"))
rcData <- read_csv("rcMX.csv")
mexMap <- read_rds("mexMap.rds")
View(mexMap)
tm_shape(mexMap) +
tm_borders()
library(tidyverse); library(sf); library(tmap)
tm_shape(mexMap) +
tm_borders()
mexMap <- read_rds("mexico_map.rds")
tm_shape(mexMap) +
tm_borders()
